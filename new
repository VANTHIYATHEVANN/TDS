package main

import (
    "encoding/json"
    "fmt"
    "log"
    "math/rand"
    "net/http"
    "sync"
    "time"

    "github.com/gorilla/websocket"
)

type Stock struct {
    Symbol string  `json:"symbol"`
    Price  float64 `json:"price"`
}

var (
    clients   = make(map[*websocket.Conn]bool)
    broadcast = make(chan Stock)
    upgrader  = websocket.Upgrader{}
    mu        sync.Mutex
)

func main() {
    // Serve websocket
    http.HandleFunc("/ws", handleWS)
    // Start emitting mock stock updates
    go emitMockStockUpdates()
    log.Fatal(http.ListenAndServe(":8080", nil))
}

func handleWS(w http.ResponseWriter, r *http.Request) {
    // Upgrade connection to websocket
    conn, err := upgrader.Upgrade(w, r, nil)
    if err != nil {
        log.Println(err)
        return
    }
    defer conn.Close()

    // Register client
    mu.Lock()
    clients[conn] = true
    mu.Unlock()

    // Listen for messages from client
    for {
        // Ignore incoming messages
    }
}

func emitMockStockUpdates() {
    symbols := []string{"AAPL", "GOOG", "MSFT", "AMZN", "FB"}
    for {
        // Generate mock stock price updates
        for _, symbol := range symbols {
            stock := Stock{
                Symbol: symbol,
                Price:  rand.Float64() * 1000, // Generate random price
            }

            // Broadcast stock update to all clients
            broadcast <- stock

            // Sleep for a random duration to simulate real-time updates
            time.Sleep(time.Duration(rand.Intn(5)) * time.Second)
        }
    }
}

func broadcastStockUpdate(stock Stock) {
    mu.Lock()
    defer mu.Unlock()
    for client := range clients {
        err := client.WriteJSON(stock)
        if err != nil {
            log.Printf("error broadcasting stock update: %v", err)
            client.Close()
            delete(clients, client)
        }
    }
}



import React, { useEffect, useState } from 'react';
import './App.css';

function App() {
  const [stocks, setStocks] = useState([]);

  useEffect(() => {
    const socket = new WebSocket('ws://localhost:8080/ws');

    socket.onmessage = (event) => {
      const newStock = JSON.parse(event.data);
      setStocks((prevStocks) =>
        prevStocks.map((stock) =>
          stock.symbol === newStock.symbol ? newStock : stock
        )
      );
    };

    return () => {
      socket.close();
    };
  }, []);

  return (
    <div className="App">
      <h1>Real-time Stock Prices</h1>
      <div className="stock-list">
        {stocks.map((stock) => (
          <div key={stock.symbol} className="stock">
            <span className="symbol">{stock.symbol}</span>
            <span className="price">${stock.price.toFixed(2)}</span>
          </div>
        ))}
      </div>
    </div>
  );
}

export default App;
